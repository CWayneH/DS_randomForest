ca1 <- ca(iris)
?ca()
# CA with function ca
library(ca)
data(iris)
# apply ca
ca1 <- ca(iris)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
plot(ca1)
# CA with function ca
library(ca)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
# CA with function ca
library(ca)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
plot(ca1)
# CA with function ca
library(ca)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
plot(ca1)
g <- plot(ca1)
shiny::runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
g
cal
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
cal
ca(iris)
plot(cal)
plot(ca1)
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
?plot()
runApp('hw4-kebwlmbhee/CA')
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
ui <- shinyUI(pageWithSidebar(
headerPanel(
h1("108703017 hw4_")
),
sidebarPanel(
sliderInput(inputId = "n", label = "Number of points", min = 1, max = nrow(iris),
value = 10, step = 1),
selectInput("x", "Select x axis:", choices = names(iris)),
selectInput("y", "Select y axis:", choices = names(iris)),
uiOutput("plot_ui")
),
mainPanel(
ggvisOutput("cal"),
tableOutput("ir_table")
)
))
server <- shinyServer(function(input, output, session) {
# A reactive subset of iris
ir <- reactive({ iris[1:input$n, ] })
# A simple visualization. In shiny apps, need to register observers
# and tell shiny where to put the controls
vis <- reactive({
xvar_name <- names(iris)[iris == input$x]
yvar_name <- names(iris)[iris == input$y]
xvar <- prop("x", as.symbol(input$x))
yvar <- prop("y", as.symbol(input$y))
ir %>%
ggvis(xvar, yvar) %>%
layer_points() %>%
plot(cal)
}) %>% bind_shiny("cal", "plot_ui")
output$ir_table <- renderTable({
ir()[, c(input$x, input$y)]
})
})
# Run the application
shinyApp(ui = ui, server = server)
runApp()
g
cal <- plot(cal)
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
cal <- plot(cal)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
cal <- plot(cal)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
plot(cal)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
plot(cal)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
# CA with function ca
library(ca)
# apply ca
ca1 = ca(author)
# sqrt of eigenvalues
ca1$sv
plot(cal)
# CA with function ca
library(ca)
# apply ca
ca1 = ca(author)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
# CA with function ca
library(ca)
# apply ca
ca1 <- ca(author)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
library(shiny)
# apply ca
ca1 <- ca(author)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
# apply ca
ca1 <- ca(author)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
# apply ca
ca1 <- ca(author)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
# CA with function ca
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
# apply ca
ca1 <- ca(author)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
# apply ca
data(iris)
iris <- iris[, -5]
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
# CA with function ca
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
iris <- iris[, -5]
# apply ca
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
head(ca1$rowcoord)
head(ca1$colcoord)
plot(cal)
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
# apply ca
data(iris)
iris <- iris[, -5]
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
library(ca)
library(shiny)
library(ggvis)
library(ggbiplot)
# apply ca
data(iris)
iris <- iris[, -5]
names(iris) <- c("PC1", "PC2", "PC3", "PC4")
ca1 <- ca(iris)
# sqrt of eigenvalues
ca1$sv
# row coordinates
head(ca1$rowcoord)
# column coordinates
head(ca1$colcoord)
plot(ca1)
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp()
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp()
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/CA')
runApp('hw4-kebwlmbhee/hw4')
runApp()
runApp('hw4-kebwlmbhee/hw4')
runApp()
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp()
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
PoV <- ir.pca$sdev^2/sum(ir.pca$sdev^2)
PoV
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggvis)
library(ggbiplot)
data(iris)
# log transform
log.ir <- log(iris[, 1:4])
ir.species <- iris[, 5]
# apply PCA - scale. = TRUE is highly advisable, but default is FALSE.
ir.pca <- prcomp(log.ir,center = TRUE, scale. = TRUE)
g <- ggbiplot(ir.pca, obs.scale = 1, var.scale = 1, groups = ir.species)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal', legend.position = 'top')
PoV <- ir.pca$sdev^2/sum(ir.pca$sdev^2)
PoV
summary(pc)$importance[2,]
summary(ir.pca)$importance[2,]
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
?column
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/hw4')
runApp()
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
summary(ir.pca)$importance[2,]
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/test')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
runApp('hw4-kebwlmbhee/hw4')
install.packages('randomForest')
?randomForest
setwd("D:/OneDrive - nccu.edu.tw/Data_Science/HW/ds_final")
rm(list = ls())
library('randomForest')
library('ggplot2')
train_data <- read.csv(file = "train_salary.csv", header = T, stringAsFactors = F)
train_data <- read.csv(file = train_salary.csv, header = T, stringAsFactors = F)
setwd("D:/OneDrive - nccu.edu.tw/Data_Science/HW/ds_final")
read.csv(file = train_salary.csv, header = T, stringAsFactors = F)
train_data <- read.csv(file = 'train_salary.csv', header = T, stringAsFactors = F)
train_data <- read.csv(file = "train_salary.csv", header = T, stringAsFactors = F)
setwd("D:/OneDrive - nccu.edu.tw/Data_Science/HW")
train_data <- read.csv(file = "ds_final/train_salary.csv", header = T, stringAsFactors = F)
q()
